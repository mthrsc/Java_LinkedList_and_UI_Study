/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIPackage;

import AppPackage.SongObject;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import listPackage.LinkedList;

/**
 *
 * @author mth Gui.java 11 07 2020
 */
public class Gui extends javax.swing.JFrame {
    
    private LinkedList<SongObject> songList = new LinkedList<SongObject>();     //Creating Linkedlist
    private DefaultListModel dlm = new DefaultListModel();  //Creating model for JList element

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        autoPopButton.setVisible(false); //Personal tool button hidden. See autoPopButtonActionPerformed() for more details
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortingRadioGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSong = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textSongTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textYear = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editTitleButton = new javax.swing.JButton();
        editYearButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        autoPopButton = new javax.swing.JButton();
        panel1 = new java.awt.Panel();
        jRadioButtonASC = new javax.swing.JRadioButton();
        jRadioButtonDSC = new javax.swing.JRadioButton();
        sortYearButton = new javax.swing.JButton();
        sortSongButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        searchResultLabel = new javax.swing.JLabel();
        shuffleButton = new javax.swing.JButton();
        listSizeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jListSong);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("SongApp");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("x19219661");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Song title:");

        textSongTitle.setText("songTitle");

        jLabel4.setText("Year:");

        textYear.setText("1990");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove top song");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editTitleButton.setText("Edit title...");
        editTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTitleButtonActionPerformed(evt);
            }
        });

        editYearButton.setText("Edit year...");
        editYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editYearButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        autoPopButton.setText("AutoPopulate 10");
        autoPopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPopButtonActionPerformed(evt);
            }
        });

        panel1.setBackground(new java.awt.Color(200, 200, 200));

        sortingRadioGroup.add(jRadioButtonASC);
        jRadioButtonASC.setSelected(true);
        jRadioButtonASC.setText("ASC");

        sortingRadioGroup.add(jRadioButtonDSC);
        jRadioButtonDSC.setText("DSC");

        sortYearButton.setText("Sort year");
        sortYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortYearButtonActionPerformed(evt);
            }
        });

        sortSongButton.setText("Sort Song");
        sortSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSongButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sortYearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sortSongButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonASC)
                    .addComponent(jRadioButtonDSC))
                .addGap(18, 18, 18))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonASC)
                    .addComponent(sortSongButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortYearButton)
                    .addComponent(jRadioButtonDSC))
                .addGap(20, 20, 20))
        );

        searchButton.setText("Search...");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTextField.setText("Enter title to search...");

        searchResultLabel.setText("Search result");

        shuffleButton.setText("Shuffle");
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });

        listSizeLabel.setText("List empty");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(autoPopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton)
                            .addComponent(searchResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(listSizeLabel))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(80, 80, 80)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textSongTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(108, 108, 108)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(47, 47, 47)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTitleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editYearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shuffleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSongTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeButton)
                                .addGap(66, 66, 66)
                                .addComponent(editTitleButton)
                                .addGap(29, 29, 29)
                                .addComponent(editYearButton)
                                .addGap(29, 29, 29)
                                .addComponent(shuffleButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(autoPopButton)
                        .addGap(28, 28, 28)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)
                        .addGap(18, 18, 18)
                        .addComponent(searchResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

        if (songList.size() >= 10) {        //Add song will first make sure that the list size is 10 or less
            JOptionPane.showMessageDialog(null, "List is full!! ");
        } else {
            String st = textSongTitle.getText();    //Getting string from textSongTitle 
            int y = Integer.parseInt(textYear.getText());   //Parsing int from textYear 

            SongObject so = new SongObject(st, y);  //creating a songobject with both values

            songList.add(so);       //adding to the list
            dlm.addElement(so);     //adding to the JList model
            jListSong.setModel(dlm);    //Setting model to JList
            updateListSizeLabel();      //update size label
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        if (songList.size() == 1) {     //If there is only 1 song to remove, LinkedList remove node 0, and I clear JList model
            songList.remove(0);
            dlm.clear();
        } else if (songList.size() == 0) {  //Error message if list is already empty
            JOptionPane.showMessageDialog(null, "List is empty...");
        } else {        //else remove node 0 as per instruction (top of the list) and refresh JList element
            songList.remove(0);
            refreshJList();
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTitleButtonActionPerformed
        // TODO add your handling code here:
        int index = 0;
        index = jListSong.getSelectedIndex();   //Edit will get the index of the selected element in the JList

        if (jListSong.getSelectedValue() == null) { //If nothing is selected, error message
            JOptionPane.showMessageDialog(null, "Please select a song");
        } else {    //Else it is requestion a new title and passing both index and new title to the LinkedList function, and refrsh JList element
            String newTitle = JOptionPane.showInputDialog(null, "Enter new title: ");
            songList.editTitle(index, newTitle);
            refreshJList();
        }
    }//GEN-LAST:event_editTitleButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);     //Terminate software
    }//GEN-LAST:event_exitButtonActionPerformed

    private void sortYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortYearButtonActionPerformed
        // TODO add your handling code here:
        //When calling for sorting the App will first check what button is selected
        //ASC or DSC. It will then call the corresponding LinkedList function and refreesh list
        if (jRadioButtonASC.isSelected()) {            
            songList.sortYearASC(songList.size());
            refreshJList();
        } else if (jRadioButtonDSC.isSelected()) {
            songList.sortYearDSC(songList.size());
            refreshJList();
        }
    }//GEN-LAST:event_sortYearButtonActionPerformed

    private void autoPopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPopButtonActionPerformed
        // TODO add your handling code here:
        //I created this function to gain time while testing. I will hide the button but keep the code here for you to see.
        //Populating the list manually everytime took too much time.
        //Keep in mind that this is a personal tool that doesn't take into account the 10 songs limit
        String s;
        int k;
        for (int i = 0; i < 10; i++) {
            s = "Test " + String.valueOf(i);
            k = 1990 + i;
            SongObject so = new SongObject(s, k);
            songList.add(so);
        }
        refreshJList();
    }//GEN-LAST:event_autoPopButtonActionPerformed

    private void editYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editYearButtonActionPerformed
        // TODO add your handling code here:
        //Like the edit title function, we get the index from the selected element in JList, and ask user for year
        //and passes both info on to the LinkedList function
        int index = 0;
        index = jListSong.getSelectedIndex();
        
        if (jListSong.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Please select a song");
        } else {
            int newYear = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter new year: "));
            songList.editYear(index, newYear);
            refreshJList();
        }
    }//GEN-LAST:event_editYearButtonActionPerformed

    private void sortSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSongButtonActionPerformed
        // TODO add your handling code here:
        //As sorting by year, but for song titles
        if (jRadioButtonASC.isSelected()) {
            songList.sortTitleASC();
            refreshJList();
            
        } else if (jRadioButtonDSC.isSelected()) {
            songList.sortTitleDSC();
            refreshJList();
        }
    }//GEN-LAST:event_sortSongButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:

        //I take the text from searchTextField and pass it on to the search function on the LinkedList
        //Then I receive the index of the position. I can then highlight the song in the JList in the GUI
        //If there is no match, a label will read no match found
        String s = searchTextField.getText();
        
        System.out.println("Text to search: " + s);
        
        int result = songList.searchTitle(s);
        
        if (result < 10) {
            jListSong.setSelectedIndex(result);
            searchResultLabel.setText("");
        } else if (result > 9) {
            searchResultLabel.setText("No Match found");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        // TODO add your handling code here:
        //Call suffle function and refresh JList
        songList.shuffle();
        refreshJList();
    }//GEN-LAST:event_shuffleButtonActionPerformed

    //Refresh list starts by clearing the model 
    //Then it re-add LList element in order one by one and update the JList element in the GUI
    public void refreshJList() {
        dlm.clear();
        for (int i = 0; i < songList.size(); i++) {
            dlm.addElement(songList.get(i));
        }
        jListSong.setModel(dlm);
        updateListSizeLabel();
    }

    //Update size Label is just using the LinkedList size to provide the right message
    //If the list is 10, the message reads that the list is full
    public void updateListSizeLabel() {
        int x = songList.size();
        
        if (x >= 10) {
            listSizeLabel.setText("List size: " + x + " List is full");
        } else {
            listSizeLabel.setText("List size: " + x);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton autoPopButton;
    private javax.swing.JButton editTitleButton;
    private javax.swing.JButton editYearButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListSong;
    private javax.swing.JRadioButton jRadioButtonASC;
    private javax.swing.JRadioButton jRadioButtonDSC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel listSizeLabel;
    private java.awt.Panel panel1;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchResultLabel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton shuffleButton;
    private javax.swing.JButton sortSongButton;
    private javax.swing.JButton sortYearButton;
    private javax.swing.ButtonGroup sortingRadioGroup;
    private javax.swing.JTextField textSongTitle;
    private javax.swing.JTextField textYear;
    // End of variables declaration//GEN-END:variables
}
